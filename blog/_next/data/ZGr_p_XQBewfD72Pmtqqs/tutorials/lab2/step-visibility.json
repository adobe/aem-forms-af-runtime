{"pageProps":{"post":{"title":"Headless Adaptive Form : Creating a Multi Language Multistep Form","date":"2020-03-16T05:35:07.322Z","slug":["lab2","step-visibility"],"content":"\n# Enable the wizard experience\n\nIf you will notice all the tabs are visible and one can navigate from one step to another. The steps below will enable the experience where one step will be visible at a time and upon validation user will be able to navigate to the next step\n\n## Make all the panels hidden except the first\n\nWe need to add the visible property to all the panels `step2`, `loanDetails` and `accountDetails`\n\n```codeDiff\n/assets/tutorial/lab2/json/loan-form-tabs.form.json;/assets/tutorial/lab2/json/visible-tabs-1.form.json\n```\n\n![Image](/assets/tutorial/lab2/loan-form-visible.png)\n\n\nBut now we are not able to navigate to the any of the panels. The next step will enable navigation between the different panels on click of a button\n\n## Navigate to second step after validation\n\nIn this particular use case we need to show the OTP tab after clicks on the `View Loan Eligibility` button and has entered all data in that panel. To do that, \n\n1. On Click of Button, we need to validate the current panel\n2. If the Validation succeeds, show panel `step2` and Hide panel `step1`\n\nLuckily, our Form Grammar enables us to do all those things in the json itself.\n\n### Dispatch a custom Event\n\nFor the `View Loan Eligibility` button, add the following event handler for click\n\n```json\n\"events\" : {\n    \"click\" : \"if(length(validate($parent)) == 0, dispatchEvent('custom:verifyOTP'),{})\"\n},\n```\n\n> ### Understanding the Expression\n> \n> The snippet above looks cryptic but it does what is mentioned above,\n> \n> The grammar exposes \n> \n> * `$parent` property to access the parent panel of the current field. In this case `step1`\n> * a `validate` function, that returns an array of error messages in the Form or a Panel. So `validate($parent)` returns an array of error messages in the panel `step1`\n> * a `length` function which returns the length of an array or a string. `length(validate($parent)) == 0` captures the number of error messages in the `step1` panel\n> * an `if` function with the syntax `if(condition, truthValue, falseValue)`  that evaluates the condition and if it is true returns > the truthValue else falseValue. `if(length(validate($parent)) == 0, dispatchEvent('custom:verifyOTP'),{})` invokes `dispatchEvent('custom:verifyOTP')` if the validation is successful else nothing. The syntax of do nothing is `{}` (empty object) in our grammar.\n> * a function `dispathEvent` that triggers an event on the form. \n> \n> So the expression above triggers an event `verifyOTP` if the panel `step1` is valid else nothing. The core of the Form Runtime revolves around events. One can trigger custom events and fields can listen on them to update their properties.\n> \n> In AF Definition, the event handlers must return an object (even an empty object is acceptable). The keys in that object are mapped to the properties of the field. \n> \n> ```json\n> \"events\" : {\n>     \"custom:event\" : \"{enable : false(), label : {value : 'new label'}}\"\n> },\n> ```\n> \n> So in the snippet above, whenever the event `custom:event` is triggered, the handler will return an object indicating  to update the `label` and `enable` property of the field.\n> \n\n### Handle the Custom Event\n\nAdd a listener of that event on the panel `step2` and make that panel visible\n\n```json\n\"events\" : {\n    \"custom:verifyOTP\" : \"{visible : true()}\"\n},\n```\n\n```codeDiff\n/assets/tutorial/lab2/json/visible-tabs-2.form.json;/assets/tutorial/lab2/json/visible-tabs-3.form.json\n```\n","toc":[{"level":1,"text":"Enable the wizard experience","id":"enable-the-wizard-experience"},{"level":2,"text":"Make all the panels hidden except the first","id":"make-all-the-panels-hidden-except-the-first"},{"level":2,"text":"Navigate to second step after validation","id":"navigate-to-second-step-after-validation"},{"level":3,"text":"Dispatch a custom Event","id":"dispatch-a-custom-event"},{"level":3,"text":"Understanding the Expression","id":"understanding-the-expression"},{"level":3,"text":"Handle the Custom Event","id":"handle-the-custom-event"}],"nextTitle":"Finishing the form","nextSlug":["lab2","finishing-touches"],"prevTitle":"Enable Tabbed Layout for the Form","prevSlug":["lab2","add-step-form"],"subTitle":"One Step visible at a time","kind":"tutorials"}},"__N_SSG":true}